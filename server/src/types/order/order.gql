union OrderResult = OrderAccepted | OrderInvalid

type Order{
    id: ID
    idUser: ID,
    listOfProducts: [OrderProduct]
    shippingAddress: OrderShippingAddress
    address: String
    orderStatus: OrderStatus
    total: Float
    paypal: PaypalOrder
    month: String
}

type PaypalOrder{
    idOrder: ID
    idPayer: ID
}


type OrderAccepted{
    status: String
    message: String
    listOfOrders: [Order]
}

type OrderInvalid{
    status: String
    message: String
    listOfErrors: [String]
}


#---------------------------------------------------------------------------

input OrderInput{
    listOfProducts: [OrderProductDataInput!]!
    address: String!,
    paypal: PaypalInput!
}

input PaypalInput{
    idOrder: ID!,
    idPayer: ID!
}

#---------------------------------------------------------------------------

type OrderProduct{
    id: ID
    sku: String
    name: String
    quantity: Int
    thumbnail: String
    price: Price
    subtotal: Float
}

input OrderProductDataInput{
    id: ID
    sku: String
    name: String
    quantity: Int
    thumbnail: String
    price: PriceInput
    subtotal: Float
}


#---------------------------------------------------------------------------

input OrderProductInput{
    id: ID!
    quantity: Int!
}

type OrderShippingAddress{
    country: String
    city: String
    neighbourhood: String
    zipcode: Int
    street: String
    buildingNumber: String
    apartmentNumber: String
}

input OrderShippingAddressInput{
    country: String!
    city: String!
    neighbourhood: String!
    zipcode: Int!
    street: String!
    buildingNumber: String!
    apartmentNumber: String
}

enum OrderStatus{
    pending
    packaged
    in_transit
    delivered
    cancelled
}

#---------------------------------------------------------------------------

type PaypalLink{
    href: String
    rel: String
    method: String
}

type CreatePayment {
    id: ID
    status: String
    links: [PaypalLink!]
}

type PaymentSuccesful{
    status: String
    message: String
}

input PaymentExecutionInput{
    paymentID: ID!,
    payerID: ID!
}

#---------------------------------------------------------------------------

extend type Query{
    queryOrder(input: ID!): Order
}

#---------------------------------------------------------------------------

extend type Mutation {
    createOrder(input: OrderInput!): OrderResult
    updateOrder(id: ID!, input: OrderInput!): Order
    createPayment: CreatePayment
    executePayment(id: PaymentExecutionInput!): PaymentSuccesful
}
