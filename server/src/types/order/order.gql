type Order{
    id: ID
    idUser: ID,
    listOfProducts: [OrderProduct]
    shippingAddress: OrderShippingAddress
    address: String
    status: OrderStatus
    total: Float
}

input OrderInput{
    idUser: ID!
    listOfProducts: [OrderProductDataInput!]!
    address: String!
}

type OrderProduct{
    id: ID
    code: String
    name: String
    quantity: Int
    thumbnail: String
    price: Price
    subtotal: Float
}

input OrderProductDataInput{
    id: ID
    code: String
    name: String
    quantity: Int
    thumbnail: String
    price: PriceInput
    subtotal: Float
}


input OrderProductInput{
    id: ID!
    quantity: Int!
}

type OrderShippingAddress{
    country: String
    city: String
    neighbourhood: String
    zipcode: Int
    street: String
    buildingNumber: String
    apartmentNumber: String
}

input OrderShippingAddressInput{
    country: String!
    city: String!
    neighbourhood: String!
    zipcode: Int!
    street: String!
    buildingNumber: String!
    apartmentNumber: String
}

enum OrderStatus{
    PENDING
    IN_TRANSIT
    COMPLETED
    CANCELED
}

extend type Query{
    queryOrder(input: ID!): Order
}

extend type Mutation {
    createOrder(input: OrderInput!): [Order!]
    updateOrder(id: ID!, input: OrderInput!): Order
}
