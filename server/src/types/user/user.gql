enum Role {
    ADMIN
    MEMBER
    EDITOR
}

type User{
    id: ID
    firstName: String
    middleName: String
    lastName: String
    secondLastName: String
    password: String
    email: String
    birthday: String
    cellphone: String
    role: Role
    mapOfAddresses: MapOfAddresses
}

input UserInput{
    id: ID
    firstName: String!
    middleName: String
    lastName: String!
    secondLastName: String!
    password: String!
    email: String!
    birthday: String!
    cellphone: String!
    role: String!
    mapOfAddresses: MapOfAddressesInput
}

input SignupInput{
    firstName: String!
    middleName: String
    lastName: String!
    secondLastName: String!
    password: String!
    email: String!
    birthday: String!
    cellphone: String!
    mapOfAddresses: MapOfAddressesInput!
}

type AdminSignup{
    firstName: String
    middleName: String
    lastName: String
    secondLastName: String
    password: String
    email: String
    cellphone: String
    role: String
}

input AdminSignupInput{
    firstName: String!
    middleName: String
    lastName: String!
    secondLastName: String!
    password: String!
    email: String!
    cellphone: String!
}

input LoginInput{
    email: String!
    password: String!
}

type ResetPassword{
    email: String!
    password: String!
    confirmPassword: String!
}

input UpdateUserInput{
    id: ID
    firstName: String
    middleName: String
    lastName: String
    secondLastName: String
    cellphone: String
    address: [AddressInput!]
}

type QueryUser{
    id: ID
    firstName: String!
    middleName: String
    lastName: String!
    secondLastName: String!
    email: String!
    birthday: String
    cellphone: String
    role: Role!
    mapOfAddresses: MapOfAddresses!
}

type AuthUser {
    token: String!
    userInfo: QueryUser
    expiresIn: Int!
}

input ResetPasswordInput{
    email: String!
    password: String!
    confirmPassword: String!
}

type Query {
    queryUserByToken(token: String!) : QueryUser!
    queryUserInfo: QueryUser!
    me: QueryUser!
    login(input: LoginInput!): AuthUser!
}

type Mutation {
    signup(input: SignupInput!): AuthUser!
    adminSignup(input: AdminSignupInput!): AuthUser!
    deleteUser( id : ID!) : String
    updateUser( input: UpdateUserInput ) : User
    resetPassword(input: ResetPasswordInput) : User
}