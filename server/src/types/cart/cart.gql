scalar Date

#---------------------------------------------------------------------------

type Cart {
    id: ID
    idUser: ID
    Status: String
    listOfProducts: [CartProducts!]
    timeout: Timeout
    createdAt: String
}

type Timeout {
    start: Date
    end: Date
}

type CartProducts {
    id: ID
    code: String
    quantity: Int
    price: Price
    name: String
    thumbnail: String
    purchaseLimit: Int
}

#---------------------------------------------------------------------------


input DeleteCartInput{
    idUser: String
}


#---------------------------------------------------------------------------

type MyCart{
    status: String
    message: String
    cart: Cart
}

type InvalidCart{
    status: String
    message: String
    listOfErrors: [String]
}

type DeletedCart{
    status: String
    message: String
}


#---------------------------------------------------------------------------

union CartResult = MyCart | InvalidCart | DeletedCart

#---------------------------------------------------------------------------


input CartProductInput{
    idProduct: ID!
    quantity: Int
}


#---------------------------------------------------------------------------

extend type Mutation {
    createCart(input: CartProductInput!): CartResult
    deleteCart: CartResult
    updateProductQuantity(input: CartProductInput!): CartResult
    addProductToCart(input: CartProductInput!): CartResult
}


extend type Query {
    queryCart: CartResult
}





